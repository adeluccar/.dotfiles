peer_my_npm () {
  export PKG=$1;
  npm info "$PKG@latest" peerDependencies --json |\
    command sed 's/[\{\},]//g ; s/: /@/g' |\
    xargs pnpm install --save"$2" "$PKG@latest"
}

bootmeup () {
  if (( $# < 1 )); then
    echo 'usage: bootmeup [name]' >&2
    return 1
  fi

  if ! [ -x "$(command -v pnpm)" ]; then
    echo 'Error: pnpm is not installed.' >&2
    return 1
  fi

  if ! [ -x "$(command -v peer_my_npm)" ]; then
    echo 'Error: peer_my_npm is not installed.' >&2
    return 1
  fi

  # add basic package.json
  echo 'Adding basic package.json file'
  cat > package.json <<EOF
{
  "name": "$1",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Alberto De Lucca",
  "license": "MIT"
}
EOF
  echo 'Added package.json'
  echo ''

  # prepare project dirs
  echo 'Adding placeholder directories...'
  mkdir src
  echo 'Added src/ dir.'
  echo ''

  # install eslint
  echo 'Installing eslint...'
  pnpm install --save-dev eslint-config-standard \
    eslint-plugin-standard eslint-plugin-promise \
    eslint-plugin-import eslint-plugin-node
  echo 'Installed eslint.'
  echo ''

  # fix eslint dependencies
  echo 'Installing eslint peer dependencies...'
  peer_my_npm eslint-config-standard -dev
  peer_my_npm eslint-plugin-standard -dev
  peer_my_npm eslint-plugin-import -dev
  peer_my_npm eslint-plugin-node -dev
  echo 'Installed eslint peer dependencies.'

  # configure eslint (standard js style)
  echo 'Configuring eslint (StandardJS)...'
  cat > .eslintrc.json <<'EOF'
{
  "extends": "standard"
}
EOF
  echo 'Configured eslint (StandardJS).'
  echo ''

  # install babel
  echo 'Installing Babel...'
  pnpm install --save-dev babel-core babel-preset-env
  echo 'Installed Babel.'
  echo ''

  # configure babelrc to use env preset
  echo 'Configuring Babel (env preset)...'
  cat > .babelrc <<'EOF'
{
  "presets": ["env"]
}
EOF
  echo 'Configured Babel (env preset).'
  echo ''

  # add gitignore
  echo "Adding gitignore..."
  cat > .gitignore <<'EOF'
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Typescript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# distribution and build files
dist/
EOF
  echo "Added .gitignore."
}
